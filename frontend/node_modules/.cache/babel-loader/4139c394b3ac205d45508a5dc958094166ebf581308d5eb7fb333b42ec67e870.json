{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Task Management\\\\frontend\\\\src\\\\components\\\\Notifications.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Badge from '@mui/material/Badge';\nimport NotificationsIcon from '@mui/icons-material/Notifications';\nimport Switch from '@mui/material/Switch';\nimport './Notifications.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Notifications = ({\n  tasks\n}) => {\n  _s();\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\n  const [areNotificationsEnabled, setAreNotificationsEnabled] = useState(localStorage.getItem('notificationsEnabled') === 'true' || false);\n  const [notifications, setNotifications] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    localStorage.setItem('notificationsEnabled', areNotificationsEnabled);\n  }, [areNotificationsEnabled]);\n  const calculateNotifications = useCallback(() => {\n    if (areNotificationsEnabled && tasks && tasks.length > 0) {\n      const now = new Date();\n      const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);\n      oneDayFromNow.setHours(23, 59, 59, 999);\n      const dueSoon = tasks.filter(task => {\n        const dueDate = new Date(task.dueDate);\n        return dueDate > now && dueDate <= oneDayFromNow;\n      });\n      const overdue = tasks.filter(task => new Date(task.dueDate) < now);\n      const newNotifications = [];\n      dueSoon.forEach(task => {\n        newNotifications.push({\n          message: `Task \"${task.title}\" is due soon!`,\n          taskId: task._id\n        });\n      });\n      overdue.forEach(task => {\n        newNotifications.push({\n          message: `Task \"${task.title}\" is overdue!`,\n          taskId: task._id\n        });\n      });\n      setNotifications(newNotifications);\n    } else {\n      setNotifications([]);\n    }\n    setIsLoading(false);\n  }, [areNotificationsEnabled, tasks]); // <-- Dependencies for useCallback\n\n  useEffect(() => {\n    calculateNotifications();\n    const intervalId = setInterval(calculateNotifications, 60000);\n    return () => clearInterval(intervalId);\n  }, [tasks, calculateNotifications]);\n  const toggleNotificationsPanel = () => {\n    setIsPanelOpen(!isPanelOpen);\n  };\n  const handleNotificationToggle = () => {\n    setAreNotificationsEnabled(!areNotificationsEnabled);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"notifications-container\",\n    children: [/*#__PURE__*/_jsxDEV(Badge, {\n      badgeContent: notifications.length,\n      color: \"error\",\n      onClick: toggleNotificationsPanel,\n      className: \"notifications-icon\" // Add a class to the Badge\n      ,\n      children: /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), isPanelOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notifications-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          checked: areNotificationsEnabled,\n          onChange: handleNotificationToggle,\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notifications-list\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-item\",\n          children: \"Loading notifications...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 15\n        }, this) : notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-item\",\n          children: \"No new notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this) : notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"notification-item\",\n          children: notification.message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Notifications, \"AIc/IzHxOiifpxShY7r3QHYaOkk=\");\n_c = Notifications;\nexport default Notifications;\nvar _c;\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Badge","NotificationsIcon","Switch","jsxDEV","_jsxDEV","Notifications","tasks","_s","isPanelOpen","setIsPanelOpen","areNotificationsEnabled","setAreNotificationsEnabled","localStorage","getItem","notifications","setNotifications","isLoading","setIsLoading","setItem","calculateNotifications","length","now","Date","oneDayFromNow","getTime","setHours","dueSoon","filter","task","dueDate","overdue","newNotifications","forEach","push","message","title","taskId","_id","intervalId","setInterval","clearInterval","toggleNotificationsPanel","handleNotificationToggle","className","children","badgeContent","color","onClick","fileName","_jsxFileName","lineNumber","columnNumber","checked","onChange","map","notification","index","_c","$RefreshReg$"],"sources":["D:/Projects/Task Management/frontend/src/components/Notifications.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport Badge from '@mui/material/Badge';\r\nimport NotificationsIcon from '@mui/icons-material/Notifications';\r\nimport Switch from '@mui/material/Switch';\r\nimport './Notifications.css'; \r\n\r\nconst Notifications = ({ tasks }) => {\r\n  const [isPanelOpen, setIsPanelOpen] = useState(false);\r\n  const [areNotificationsEnabled, setAreNotificationsEnabled] = useState(\r\n    localStorage.getItem('notificationsEnabled') === 'true' || false \r\n  );\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true); \r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('notificationsEnabled', areNotificationsEnabled);\r\n  }, [areNotificationsEnabled]);\r\n\r\n  const calculateNotifications = useCallback(() => {\r\n    if (areNotificationsEnabled && tasks && tasks.length > 0) { \r\n      const now = new Date();\r\n      const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);\r\n      oneDayFromNow.setHours(23, 59, 59, 999); \r\n\r\n      const dueSoon = tasks.filter(task => {\r\n        const dueDate = new Date(task.dueDate);\r\n        return dueDate > now && dueDate <= oneDayFromNow;\r\n      });\r\n\r\n      const overdue = tasks.filter(task => new Date(task.dueDate) < now);\r\n\r\n      const newNotifications = [];\r\n      dueSoon.forEach(task => {\r\n        newNotifications.push({\r\n          message: `Task \"${task.title}\" is due soon!`,\r\n          taskId: task._id,\r\n        });\r\n      });\r\n\r\n      overdue.forEach(task => {\r\n        newNotifications.push({\r\n          message: `Task \"${task.title}\" is overdue!`,\r\n          taskId: task._id,\r\n        });\r\n      });\r\n\r\n      setNotifications(newNotifications);\r\n    } else {\r\n      setNotifications([]); \r\n    }\r\n    setIsLoading(false); \r\n  }, [areNotificationsEnabled, tasks]); // <-- Dependencies for useCallback\r\n\r\n  useEffect(() => {\r\n    calculateNotifications();\r\n\r\n    const intervalId = setInterval(calculateNotifications, 60000); \r\n    return () => clearInterval(intervalId);\r\n  }, [tasks, calculateNotifications]); \r\n  \r\n\r\n  const toggleNotificationsPanel = () => {\r\n    setIsPanelOpen(!isPanelOpen);\r\n  };\r\n\r\n  const handleNotificationToggle = () => {\r\n    setAreNotificationsEnabled(!areNotificationsEnabled);\r\n  };\r\n\r\n  return (\r\n    <div className=\"notifications-container\">\r\n      <Badge \r\n        badgeContent={notifications.length} \r\n        color=\"error\" \r\n        onClick={toggleNotificationsPanel}\r\n        className=\"notifications-icon\" // Add a class to the Badge\r\n      > \r\n        <NotificationsIcon />\r\n      </Badge>\r\n\r\n      {isPanelOpen && (\r\n        <div className=\"notifications-panel\">\r\n          <div className=\"notifications-header\">\r\n            <h3>Notifications</h3>\r\n            <Switch\r\n              checked={areNotificationsEnabled}\r\n              onChange={handleNotificationToggle}\r\n              color=\"primary\"\r\n            />\r\n          </div>\r\n          <div className=\"notifications-list\">\r\n            {isLoading ? ( \r\n              <div className=\"notification-item\">Loading notifications...</div>\r\n            ) : notifications.length === 0 ? (\r\n              <div className=\"notification-item\">No new notifications</div>\r\n            ) : (\r\n              notifications.map((notification, index) => (\r\n                <div key={index} className=\"notification-item\">\r\n                  {notification.message}\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}