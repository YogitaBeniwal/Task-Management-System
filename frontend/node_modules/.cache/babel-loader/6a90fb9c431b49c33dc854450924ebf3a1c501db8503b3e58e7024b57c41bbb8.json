{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Task Management\\\\frontend\\\\src\\\\components\\\\TaskList.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/TaskList.js\nimport React, { useEffect, useState } from 'react';\nimport './TaskList.css';\nimport { deleteTask, updateTask } from '../api/taskApi'; // Import deleteTask\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  tasks,\n  onTaskDelete,\n  onTaskUpdate,\n  setIsLoggedIn\n}) => {\n  _s();\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [sortBy, setSortBy] = useState(\"\");\n  const [editingTask, setEditingTask] = useState(null);\n\n  // Pagination state\n  const [tasksPerPage, setTasksPerPage] = useState(5); // Make it controllable\n  const [currentPage, setCurrentPage] = useState(1); // Reset to 1 when tasksPerPage changes\n\n  useEffect(() => {\n    let filtered = [...tasks];\n    if (statusFilter !== 'all') {\n      filtered = filtered.filter(task => task.status === statusFilter);\n    }\n    if (searchTerm) {\n      filtered = filtered.filter(task => task.title.toLowerCase().includes(searchTerm.toLowerCase()) || task.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n    if (sortBy) {\n      filtered.sort((a, b) => {\n        if (sortBy === 'dueDate') {\n          return new Date(a.dueDate) - new Date(b.dueDate);\n        } else if (sortBy === 'priority') {\n          const priorityOrder = {\n            'low': 1,\n            'medium': 2,\n            'high': 3\n          };\n          const priorityA = priorityOrder[a.priority.toLowerCase()] || 0;\n          const priorityB = priorityOrder[b.priority.toLowerCase()] || 0;\n          return priorityA - priorityB;\n        } else if (sortBy === 'status') {\n          const statusOrder = {\n            'pending': 1,\n            'in-progress': 2,\n            'completed': 3\n          };\n          return statusOrder[a.status.toLowerCase()] - statusOrder[b.status.toLowerCase()];\n        }\n        return 0;\n      });\n    }\n    setFilteredTasks(filtered);\n  }, [tasks, searchTerm, statusFilter, sortBy]);\n\n  // Pagination logic\n  const indexOfLastTask = currentPage * tasksPerPage;\n  const indexOfFirstTask = indexOfLastTask - tasksPerPage;\n  const currentTasks = filteredTasks.slice(indexOfFirstTask, indexOfLastTask);\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  // Handle changes to tasksPerPage input\n  const handleTasksPerPageChange = event => {\n    const newTasksPerPage = parseInt(event.target.value, 10);\n    setTasksPerPage(newTasksPerPage);\n    setCurrentPage(1); // Reset to page 1 when tasks per page changes\n  };\n  const handleDelete = async taskId => {\n    if (window.confirm(\"Are you sure you want to delete this task?\")) {\n      try {\n        await deleteTask(taskId);\n        onTaskDelete(taskId);\n      } catch (error) {\n        console.error(\"Error deleting task:\", error);\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n          // Ensure logout logic is executed after the error response is received\n          setIsLoggedIn(false);\n          localStorage.removeItem('token');\n        }\n      }\n    }\n  };\n  // Function to handle editing a task\n  const handleEdit = task => {\n    setEditingTask({\n      ...task\n    });\n  };\n\n  // Function to handle saving the edited task\n  const handleSaveEdit = async () => {\n    try {\n      // Validate editingTask (e.g., title is required)\n      if (!editingTask.title) {\n        alert('Task title is required!');\n        return;\n      }\n      //console.log(\"Task ID being sent:\", editingTask._id); // Add this line\n      //console.log(\"Editing Task Data:\", editingTask);\n      /* const formattedDueDate = editingTask.dueDate \r\n        ? new Date(editingTask.dueDate).toISOString().slice(0, 10) // Get only \"yyyy-MM-dd\"\r\n        : null; // Handle cases where dueDate might be empty */\n\n      const updatedTask = await updateTask(editingTask._id, editingTask);\n      onTaskUpdate(updatedTask); // Notify parent (App) about the update\n      setEditingTask(null);\n    } catch (error) {\n      console.error(\"Error updating task:\", error.message);\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        // Ensure logout logic is executed after the error response is received\n        setIsLoggedIn(false);\n        localStorage.removeItem('token');\n\n        // Option 1: Force a re-render (less ideal)\n        // This will force the component to re-render and reflect the logged-out state\n        // However, it's generally better to let React handle re-renders based on state changes\n        this.forceUpdate();\n\n        // Option 2: Redirect to login (more common approach)\n        // You can redirect the user to the login page after logout\n        // Assuming you have a history object from react-router-dom\n        // history.push('/login'); \n      }\n    }\n  };\n\n  // Function to handle changes in the edit form\n  const handleEditChange = e => {\n    setEditingTask({\n      ...editingTask,\n      [e.target.name]: e.target.value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"task-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search tasks...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: statusFilter,\n        onChange: e => setStatusFilter(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"all\",\n          children: \"All Statuses\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pending\",\n          children: \"Pending\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"in-progress\",\n          children: \"In Progress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"completed\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: sortBy,\n        onChange: e => setSortBy(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: null,\n          children: \"Sort By\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"dueDate\",\n          children: \"Due Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"status\",\n          children: \"status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"tasksPerPage\",\n        children: \"Tasks per page:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"tasksPerPage\",\n        value: tasksPerPage,\n        onChange: handleTasksPerPageChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: 5,\n          children: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 10,\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: 20,\n          children: \"20\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"pagination\",\n        children: Array(Math.ceil(filteredTasks.length / tasksPerPage)).fill().map((_, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: currentPage === index + 1 ? 'active' : '',\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => paginate(index + 1),\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"task-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"table-header\",\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"table-header\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"table-header\",\n            children: \"Due Date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"table-header\",\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"table-header\",\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: currentTasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: `task-row ${index % 2 === 0 ? 'even-row' : 'odd-row'}`,\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data\",\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data\",\n            children: task.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"table-data\",\n            children: new Date(task.dueDate).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: `status-cell ${task.status.replace(/\\s+/g, '-')}`,\n            children: task.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"action-buttons\",\n            children: editingTask && editingTask._id === task._id ?\n            /*#__PURE__*/\n            // Edit Mode\n            _jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"title\",\n                value: editingTask.title,\n                onChange: handleEditChange // Add this line \n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"date\",\n                name: \"dueDate\",\n                value: editingTask.dueDate ? new Date(editingTask.dueDate).toISOString().slice(0, 10) : '',\n                onChange: handleEditChange,\n                required: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"save-button Edit-btn\",\n                onClick: handleSaveEdit,\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"cancel-button Edit-btn\",\n                onClick: () => setEditingTask(null),\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true) :\n            /*#__PURE__*/\n            // Normal Mode\n            _jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-button\",\n                onClick: () => handleEdit(task),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-button\",\n                onClick: () => handleDelete(task._id),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 15\n          }, this)]\n        }, task._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"wMs5DV4a/LRnwygmUvpqO6Ac7b8=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useEffect","useState","deleteTask","updateTask","jsxDEV","_jsxDEV","Fragment","_Fragment","TaskList","tasks","onTaskDelete","onTaskUpdate","setIsLoggedIn","_s","filteredTasks","setFilteredTasks","searchTerm","setSearchTerm","statusFilter","setStatusFilter","sortBy","setSortBy","editingTask","setEditingTask","tasksPerPage","setTasksPerPage","currentPage","setCurrentPage","filtered","filter","task","status","title","toLowerCase","includes","description","sort","a","b","Date","dueDate","priorityOrder","priorityA","priority","priorityB","statusOrder","indexOfLastTask","indexOfFirstTask","currentTasks","slice","paginate","pageNumber","handleTasksPerPageChange","event","newTasksPerPage","parseInt","target","value","handleDelete","taskId","window","confirm","error","console","response","localStorage","removeItem","handleEdit","handleSaveEdit","alert","updatedTask","_id","message","forceUpdate","handleEditChange","e","name","children","className","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","Array","Math","ceil","length","fill","map","_","index","onClick","toLocaleDateString","replace","toISOString","required","_c","$RefreshReg$"],"sources":["D:/Projects/Task Management/frontend/src/components/TaskList.js"],"sourcesContent":["// frontend/src/components/TaskList.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport './TaskList.css';\r\nimport { deleteTask, updateTask } from '../api/taskApi'; // Import deleteTask\r\n\r\nconst TaskList = ({ tasks, onTaskDelete, onTaskUpdate, setIsLoggedIn }) => { \r\n  const [filteredTasks, setFilteredTasks] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [sortBy, setSortBy] = useState(\"\");\r\n  const [editingTask, setEditingTask] = useState(null);\r\n\r\n  // Pagination state\r\n  const [tasksPerPage, setTasksPerPage] = useState(5); // Make it controllable\r\n  const [currentPage, setCurrentPage] = useState(1); // Reset to 1 when tasksPerPage changes\r\n\r\n\r\n  useEffect(() => {\r\n    let filtered = [...tasks];\r\n\r\n    if (statusFilter !== 'all') {\r\n      filtered = filtered.filter(task => task.status === statusFilter);\r\n    }\r\n\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(task =>\r\n        task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        task.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (sortBy) {\r\n      filtered.sort((a, b) => {\r\n        if (sortBy === 'dueDate') {\r\n          return new Date(a.dueDate) - new Date(b.dueDate);\r\n        } else if (sortBy === 'priority') {\r\n          const priorityOrder = {\r\n            'low': 1,\r\n            'medium': 2,\r\n            'high': 3\r\n          };\r\n          const priorityA = priorityOrder[a.priority.toLowerCase()] || 0;\r\n          const priorityB = priorityOrder[b.priority.toLowerCase()] || 0;\r\n          return priorityA - priorityB;\r\n        } else if (sortBy === 'status') {\r\n          const statusOrder = {\r\n            'pending': 1,\r\n            'in-progress': 2,\r\n            'completed': 3\r\n          };\r\n          return statusOrder[a.status.toLowerCase()] - statusOrder[b.status.toLowerCase()];\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n\r\n    setFilteredTasks(filtered);\r\n  }, [tasks, searchTerm, statusFilter, sortBy]);\r\n\r\n  // Pagination logic\r\n  const indexOfLastTask = currentPage * tasksPerPage;\r\n  const indexOfFirstTask = indexOfLastTask - tasksPerPage;\r\n  const currentTasks = filteredTasks.slice(indexOfFirstTask, indexOfLastTask);\r\n\r\n  // Change page\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n  // Handle changes to tasksPerPage input\r\n  const handleTasksPerPageChange = (event) => {\r\n    const newTasksPerPage = parseInt(event.target.value, 10);\r\n    setTasksPerPage(newTasksPerPage);\r\n    setCurrentPage(1); // Reset to page 1 when tasks per page changes\r\n  };\r\n  const handleDelete = async (taskId) => {\r\n    if (window.confirm(\"Are you sure you want to delete this task?\")) {\r\n      try {\r\n        await deleteTask(taskId); \r\n        onTaskDelete(taskId); \r\n      } catch (error) {\r\n        console.error(\"Error deleting task:\", error);\r\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n          // Ensure logout logic is executed after the error response is received\r\n          setIsLoggedIn(false);\r\n          localStorage.removeItem('token');\r\n        }\r\n      }\r\n    }\r\n  };\r\n// Function to handle editing a task\r\nconst handleEdit = (task) => {\r\n  setEditingTask({ ...task });\r\n};\r\n\r\n// Function to handle saving the edited task\r\nconst handleSaveEdit = async () => {\r\n  try {\r\n    // Validate editingTask (e.g., title is required)\r\n    if (!editingTask.title) {\r\n      alert('Task title is required!');\r\n      return;\r\n    }\r\n    //console.log(\"Task ID being sent:\", editingTask._id); // Add this line\r\n    //console.log(\"Editing Task Data:\", editingTask);\r\n    /* const formattedDueDate = editingTask.dueDate \r\n      ? new Date(editingTask.dueDate).toISOString().slice(0, 10) // Get only \"yyyy-MM-dd\"\r\n      : null; // Handle cases where dueDate might be empty */\r\n\r\n    const updatedTask = await updateTask(editingTask._id, editingTask);\r\n\r\n    onTaskUpdate(updatedTask); // Notify parent (App) about the update\r\n    setEditingTask(null); \r\n  } catch (error) {\r\n    console.error(\"Error updating task:\", error.message);\r\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n      // Ensure logout logic is executed after the error response is received\r\n      setIsLoggedIn(false);\r\n      localStorage.removeItem('token');\r\n\r\n      // Option 1: Force a re-render (less ideal)\r\n      // This will force the component to re-render and reflect the logged-out state\r\n      // However, it's generally better to let React handle re-renders based on state changes\r\n      this.forceUpdate(); \r\n\r\n      // Option 2: Redirect to login (more common approach)\r\n      // You can redirect the user to the login page after logout\r\n      // Assuming you have a history object from react-router-dom\r\n      // history.push('/login'); \r\n    }\r\n  }\r\n};\r\n\r\n  // Function to handle changes in the edit form\r\n  const handleEditChange = (e) => {\r\n    setEditingTask({ ...editingTask, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"task-controls\">\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Search tasks...\" \r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)} \r\n        />\r\n\r\n        <select value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)}>\r\n          <option value=\"all\">All Statuses</option>\r\n          <option value=\"pending\">Pending</option>\r\n          <option value=\"in-progress\">In Progress</option>\r\n          <option value=\"completed\">Completed</option>\r\n        </select>\r\n\r\n        <select value={sortBy} onChange={(e) => setSortBy(e.target.value)}>\r\n          <option value={null}>Sort By</option>\r\n          <option value=\"dueDate\">Due Date</option>\r\n          <option value=\"status\">status</option> \r\n        </select>\r\n      </div>\r\n      <div className=\"pagination-controls\">\r\n        <label htmlFor=\"tasksPerPage\">Tasks per page:</label>\r\n        <select \r\n          id=\"tasksPerPage\" \r\n          value={tasksPerPage} \r\n          onChange={handleTasksPerPageChange}\r\n        >\r\n          <option value={5}>5</option>\r\n          <option value={10}>10</option>\r\n          <option value={20}>20</option>\r\n        </select>\r\n\r\n        {/* Pagination controls (updated to reset to page 1 if needed) */}\r\n        <ul className=\"pagination\">\r\n          {Array(Math.ceil(filteredTasks.length / tasksPerPage))\r\n            .fill()\r\n            .map((_, index) => (\r\n              <li \r\n                key={index} \r\n                className={currentPage === index + 1 ? 'active' : ''}\r\n              >\r\n                <button onClick={() => paginate(index + 1)}>{index + 1}</button>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n      {/* Task List Display in Table Format */}\r\n      <table className=\"task-table\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"table-header\">Title</th>\r\n            <th className=\"table-header\">Description</th>\r\n            <th className=\"table-header\">Due Date</th>\r\n            <th className=\"table-header\">Status</th>\r\n            <th className=\"table-header\">Edit</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n        {currentTasks.map((task, index) => (\r\n              <tr key={task._id} className={`task-row ${index % 2 === 0 ? 'even-row' : 'odd-row'}`}>\r\n                <td className=\"table-data\">{task.title}</td> \r\n                <td className=\"table-data\">{task.description}</td>\r\n                <td className=\"table-data\">{new Date(task.dueDate).toLocaleDateString()}</td> \r\n                <td className={`status-cell ${task.status.replace(/\\s+/g, '-')}`}>\r\n                  {task.status} \r\n                </td>\r\n                {/* Edit/Save Actions */}\r\n              <td className=\"action-buttons\">\r\n                {editingTask && editingTask._id === task._id ? (\r\n                  // Edit Mode\r\n                  <>\r\n                    <input \r\n                        type=\"text\" \r\n                        name=\"title\" \r\n                        value={editingTask.title} \r\n                        onChange={handleEditChange} // Add this line \r\n                      />\r\n                      <input\r\n                      type=\"date\"\r\n                      name=\"dueDate\"\r\n                      value={editingTask.dueDate ? new Date(editingTask.dueDate).toISOString().slice(0, 10) : ''} \r\n                      onChange={handleEditChange}\r\n                      required\r\n                    />\r\n                      {/* Add other input fields for description, dueDate, etc. \r\n                          and attach handleEditChange to their onChange events */}\r\n                    <button className=\"save-button Edit-btn\" onClick={handleSaveEdit}>\r\n                      Save\r\n                    </button>\r\n                    <button className=\"cancel-button Edit-btn\" onClick={() => setEditingTask(null)}>\r\n                      Cancel\r\n                    </button>\r\n                    </>\r\n                ) : (\r\n                  // Normal Mode\r\n                  <>\r\n                    <button className=\"edit-button\" onClick={() => handleEdit(task)}>\r\n                      Edit\r\n                    </button>\r\n                    <button className=\"delete-button\" onClick={() => handleDelete(task._id)}>\r\n                      Delete\r\n                    </button>\r\n                  </>\r\n                )}\r\n              </td>\r\n              </tr>\r\n            ))}      \r\n        </tbody>\r\n      </table>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,gBAAgB;AACvB,SAASC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzD,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,YAAY;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACzE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACiB,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACA,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,MAAM,CAACyB,WAAW,EAAEC,cAAc,CAAC,GAAG1B,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAGnDD,SAAS,CAAC,MAAM;IACd,IAAI4B,QAAQ,GAAG,CAAC,GAAGnB,KAAK,CAAC;IAEzB,IAAIS,YAAY,KAAK,KAAK,EAAE;MAC1BU,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKb,YAAY,CAAC;IAClE;IAEA,IAAIF,UAAU,EAAE;MACdY,QAAQ,GAAGA,QAAQ,CAACC,MAAM,CAACC,IAAI,IAC7BA,IAAI,CAACE,KAAK,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAClB,UAAU,CAACiB,WAAW,CAAC,CAAC,CAAC,IAC3DH,IAAI,CAACK,WAAW,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAClB,UAAU,CAACiB,WAAW,CAAC,CAAC,CAClE,CAAC;IACH;IAEA,IAAIb,MAAM,EAAE;MACVQ,QAAQ,CAACQ,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACtB,IAAIlB,MAAM,KAAK,SAAS,EAAE;UACxB,OAAO,IAAImB,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC,GAAG,IAAID,IAAI,CAACD,CAAC,CAACE,OAAO,CAAC;QAClD,CAAC,MAAM,IAAIpB,MAAM,KAAK,UAAU,EAAE;UAChC,MAAMqB,aAAa,GAAG;YACpB,KAAK,EAAE,CAAC;YACR,QAAQ,EAAE,CAAC;YACX,MAAM,EAAE;UACV,CAAC;UACD,MAAMC,SAAS,GAAGD,aAAa,CAACJ,CAAC,CAACM,QAAQ,CAACV,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;UAC9D,MAAMW,SAAS,GAAGH,aAAa,CAACH,CAAC,CAACK,QAAQ,CAACV,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC;UAC9D,OAAOS,SAAS,GAAGE,SAAS;QAC9B,CAAC,MAAM,IAAIxB,MAAM,KAAK,QAAQ,EAAE;UAC9B,MAAMyB,WAAW,GAAG;YAClB,SAAS,EAAE,CAAC;YACZ,aAAa,EAAE,CAAC;YAChB,WAAW,EAAE;UACf,CAAC;UACD,OAAOA,WAAW,CAACR,CAAC,CAACN,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC,GAAGY,WAAW,CAACP,CAAC,CAACP,MAAM,CAACE,WAAW,CAAC,CAAC,CAAC;QAClF;QACA,OAAO,CAAC;MACV,CAAC,CAAC;IACJ;IAEAlB,gBAAgB,CAACa,QAAQ,CAAC;EAC5B,CAAC,EAAE,CAACnB,KAAK,EAAEO,UAAU,EAAEE,YAAY,EAAEE,MAAM,CAAC,CAAC;;EAE7C;EACA,MAAM0B,eAAe,GAAGpB,WAAW,GAAGF,YAAY;EAClD,MAAMuB,gBAAgB,GAAGD,eAAe,GAAGtB,YAAY;EACvD,MAAMwB,YAAY,GAAGlC,aAAa,CAACmC,KAAK,CAACF,gBAAgB,EAAED,eAAe,CAAC;;EAE3E;EACA,MAAMI,QAAQ,GAAIC,UAAU,IAAKxB,cAAc,CAACwB,UAAU,CAAC;EAC3D;EACA,MAAMC,wBAAwB,GAAIC,KAAK,IAAK;IAC1C,MAAMC,eAAe,GAAGC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,EAAE,EAAE,CAAC;IACxDhC,eAAe,CAAC6B,eAAe,CAAC;IAChC3B,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC;EACD,MAAM+B,YAAY,GAAG,MAAOC,MAAM,IAAK;IACrC,IAAIC,MAAM,CAACC,OAAO,CAAC,4CAA4C,CAAC,EAAE;MAChE,IAAI;QACF,MAAM3D,UAAU,CAACyD,MAAM,CAAC;QACxBjD,YAAY,CAACiD,MAAM,CAAC;MACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,IAAIA,KAAK,CAACE,QAAQ,KAAKF,KAAK,CAACE,QAAQ,CAACjC,MAAM,KAAK,GAAG,IAAI+B,KAAK,CAACE,QAAQ,CAACjC,MAAM,KAAK,GAAG,CAAC,EAAE;UACtF;UACAnB,aAAa,CAAC,KAAK,CAAC;UACpBqD,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;QAClC;MACF;IACF;EACF,CAAC;EACH;EACA,MAAMC,UAAU,GAAIrC,IAAI,IAAK;IAC3BP,cAAc,CAAC;MAAE,GAAGO;IAAK,CAAC,CAAC;EAC7B,CAAC;;EAED;EACA,MAAMsC,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF;MACA,IAAI,CAAC9C,WAAW,CAACU,KAAK,EAAE;QACtBqC,KAAK,CAAC,yBAAyB,CAAC;QAChC;MACF;MACA;MACA;MACA;AACJ;AACA;;MAEI,MAAMC,WAAW,GAAG,MAAMnE,UAAU,CAACmB,WAAW,CAACiD,GAAG,EAAEjD,WAAW,CAAC;MAElEX,YAAY,CAAC2D,WAAW,CAAC,CAAC,CAAC;MAC3B/C,cAAc,CAAC,IAAI,CAAC;IACtB,CAAC,CAAC,OAAOuC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACU,OAAO,CAAC;MACpD,IAAIV,KAAK,CAACE,QAAQ,KAAKF,KAAK,CAACE,QAAQ,CAACjC,MAAM,KAAK,GAAG,IAAI+B,KAAK,CAACE,QAAQ,CAACjC,MAAM,KAAK,GAAG,CAAC,EAAE;QACtF;QACAnB,aAAa,CAAC,KAAK,CAAC;QACpBqD,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;;QAEhC;QACA;QACA;QACA,IAAI,CAACO,WAAW,CAAC,CAAC;;QAElB;QACA;QACA;QACA;MACF;IACF;EACF,CAAC;;EAEC;EACA,MAAMC,gBAAgB,GAAIC,CAAC,IAAK;IAC9BpD,cAAc,CAAC;MAAE,GAAGD,WAAW;MAAE,CAACqD,CAAC,CAACnB,MAAM,CAACoB,IAAI,GAAGD,CAAC,CAACnB,MAAM,CAACC;IAAM,CAAC,CAAC;EACrE,CAAC;EAED,oBACEpD,OAAA;IAAAwE,QAAA,gBACExE,OAAA;MAAKyE,SAAS,EAAC,eAAe;MAAAD,QAAA,gBAC5BxE,OAAA;QACE0E,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,iBAAiB;QAC7BvB,KAAK,EAAEzC,UAAW;QAClBiE,QAAQ,EAAGN,CAAC,IAAK1D,aAAa,CAAC0D,CAAC,CAACnB,MAAM,CAACC,KAAK;MAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChD,CAAC,eAEFhF,OAAA;QAAQoD,KAAK,EAAEvC,YAAa;QAAC+D,QAAQ,EAAGN,CAAC,IAAKxD,eAAe,CAACwD,CAAC,CAACnB,MAAM,CAACC,KAAK,CAAE;QAAAoB,QAAA,gBAC5ExE,OAAA;UAAQoD,KAAK,EAAC,KAAK;UAAAoB,QAAA,EAAC;QAAY;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzChF,OAAA;UAAQoD,KAAK,EAAC,SAAS;UAAAoB,QAAA,EAAC;QAAO;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACxChF,OAAA;UAAQoD,KAAK,EAAC,aAAa;UAAAoB,QAAA,EAAC;QAAW;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChDhF,OAAA;UAAQoD,KAAK,EAAC,WAAW;UAAAoB,QAAA,EAAC;QAAS;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eAEThF,OAAA;QAAQoD,KAAK,EAAErC,MAAO;QAAC6D,QAAQ,EAAGN,CAAC,IAAKtD,SAAS,CAACsD,CAAC,CAACnB,MAAM,CAACC,KAAK,CAAE;QAAAoB,QAAA,gBAChExE,OAAA;UAAQoD,KAAK,EAAE,IAAK;UAAAoB,QAAA,EAAC;QAAO;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACrChF,OAAA;UAAQoD,KAAK,EAAC,SAAS;UAAAoB,QAAA,EAAC;QAAQ;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACzChF,OAAA;UAAQoD,KAAK,EAAC,QAAQ;UAAAoB,QAAA,EAAC;QAAM;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNhF,OAAA;MAAKyE,SAAS,EAAC,qBAAqB;MAAAD,QAAA,gBAClCxE,OAAA;QAAOiF,OAAO,EAAC,cAAc;QAAAT,QAAA,EAAC;MAAe;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACrDhF,OAAA;QACEkF,EAAE,EAAC,cAAc;QACjB9B,KAAK,EAAEjC,YAAa;QACpByD,QAAQ,EAAE7B,wBAAyB;QAAAyB,QAAA,gBAEnCxE,OAAA;UAAQoD,KAAK,EAAE,CAAE;UAAAoB,QAAA,EAAC;QAAC;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC5BhF,OAAA;UAAQoD,KAAK,EAAE,EAAG;UAAAoB,QAAA,EAAC;QAAE;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9BhF,OAAA;UAAQoD,KAAK,EAAE,EAAG;UAAAoB,QAAA,EAAC;QAAE;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,eAGThF,OAAA;QAAIyE,SAAS,EAAC,YAAY;QAAAD,QAAA,EACvBW,KAAK,CAACC,IAAI,CAACC,IAAI,CAAC5E,aAAa,CAAC6E,MAAM,GAAGnE,YAAY,CAAC,CAAC,CACnDoE,IAAI,CAAC,CAAC,CACNC,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBACZ1F,OAAA;UAEEyE,SAAS,EAAEpD,WAAW,KAAKqE,KAAK,GAAG,CAAC,GAAG,QAAQ,GAAG,EAAG;UAAAlB,QAAA,eAErDxE,OAAA;YAAQ2F,OAAO,EAAEA,CAAA,KAAM9C,QAAQ,CAAC6C,KAAK,GAAG,CAAC,CAAE;YAAAlB,QAAA,EAAEkB,KAAK,GAAG;UAAC;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS;QAAC,GAH3DU,KAAK;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIR,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,eAENhF,OAAA;MAAOyE,SAAS,EAAC,YAAY;MAAAD,QAAA,gBAC3BxE,OAAA;QAAAwE,QAAA,eACExE,OAAA;UAAAwE,QAAA,gBACExE,OAAA;YAAIyE,SAAS,EAAC,cAAc;YAAAD,QAAA,EAAC;UAAK;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvChF,OAAA;YAAIyE,SAAS,EAAC,cAAc;YAAAD,QAAA,EAAC;UAAW;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC7ChF,OAAA;YAAIyE,SAAS,EAAC,cAAc;YAAAD,QAAA,EAAC;UAAQ;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eAC1ChF,OAAA;YAAIyE,SAAS,EAAC,cAAc;YAAAD,QAAA,EAAC;UAAM;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACxChF,OAAA;YAAIyE,SAAS,EAAC,cAAc;YAAAD,QAAA,EAAC;UAAI;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACRhF,OAAA;QAAAwE,QAAA,EACC7B,YAAY,CAAC6C,GAAG,CAAC,CAAC/D,IAAI,EAAEiE,KAAK,kBACxB1F,OAAA;UAAmByE,SAAS,EAAE,YAAYiB,KAAK,GAAG,CAAC,KAAK,CAAC,GAAG,UAAU,GAAG,SAAS,EAAG;UAAAlB,QAAA,gBACnFxE,OAAA;YAAIyE,SAAS,EAAC,YAAY;YAAAD,QAAA,EAAE/C,IAAI,CAACE;UAAK;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5ChF,OAAA;YAAIyE,SAAS,EAAC,YAAY;YAAAD,QAAA,EAAE/C,IAAI,CAACK;UAAW;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAClDhF,OAAA;YAAIyE,SAAS,EAAC,YAAY;YAAAD,QAAA,EAAE,IAAItC,IAAI,CAACT,IAAI,CAACU,OAAO,CAAC,CAACyD,kBAAkB,CAAC;UAAC;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC7EhF,OAAA;YAAIyE,SAAS,EAAE,eAAehD,IAAI,CAACC,MAAM,CAACmE,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,EAAG;YAAArB,QAAA,EAC9D/C,IAAI,CAACC;UAAM;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV,CAAC,eAEPhF,OAAA;YAAIyE,SAAS,EAAC,gBAAgB;YAAAD,QAAA,EAC3BvD,WAAW,IAAIA,WAAW,CAACiD,GAAG,KAAKzC,IAAI,CAACyC,GAAG;YAAA;YAC1C;YACAlE,OAAA,CAAAE,SAAA;cAAAsE,QAAA,gBACExE,OAAA;gBACI0E,IAAI,EAAC,MAAM;gBACXH,IAAI,EAAC,OAAO;gBACZnB,KAAK,EAAEnC,WAAW,CAACU,KAAM;gBACzBiD,QAAQ,EAAEP,gBAAiB,CAAC;cAAA;gBAAAQ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7B,CAAC,eACFhF,OAAA;gBACA0E,IAAI,EAAC,MAAM;gBACXH,IAAI,EAAC,SAAS;gBACdnB,KAAK,EAAEnC,WAAW,CAACkB,OAAO,GAAG,IAAID,IAAI,CAACjB,WAAW,CAACkB,OAAO,CAAC,CAAC2D,WAAW,CAAC,CAAC,CAAClD,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,EAAG;gBAC3FgC,QAAQ,EAAEP,gBAAiB;gBAC3B0B,QAAQ;cAAA;gBAAAlB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACT,CAAC,eAGFhF,OAAA;gBAAQyE,SAAS,EAAC,sBAAsB;gBAACkB,OAAO,EAAE5B,cAAe;gBAAAS,QAAA,EAAC;cAElE;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACThF,OAAA;gBAAQyE,SAAS,EAAC,wBAAwB;gBAACkB,OAAO,EAAEA,CAAA,KAAMzE,cAAc,CAAC,IAAI,CAAE;gBAAAsD,QAAA,EAAC;cAEhF;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACP,CAAC;YAAA;YAEL;YACAhF,OAAA,CAAAE,SAAA;cAAAsE,QAAA,gBACExE,OAAA;gBAAQyE,SAAS,EAAC,aAAa;gBAACkB,OAAO,EAAEA,CAAA,KAAM7B,UAAU,CAACrC,IAAI,CAAE;gBAAA+C,QAAA,EAAC;cAEjE;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACThF,OAAA;gBAAQyE,SAAS,EAAC,eAAe;gBAACkB,OAAO,EAAEA,CAAA,KAAMtC,YAAY,CAAC5B,IAAI,CAACyC,GAAG,CAAE;gBAAAM,QAAA,EAAC;cAEzE;gBAAAK,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACT;UACH;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA,GA7CIvD,IAAI,CAACyC,GAAG;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA8Cb,CACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEV,CAAC;AAACxE,EAAA,CArPIL,QAAQ;AAAA6F,EAAA,GAAR7F,QAAQ;AAuPd,eAAeA,QAAQ;AAAC,IAAA6F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}