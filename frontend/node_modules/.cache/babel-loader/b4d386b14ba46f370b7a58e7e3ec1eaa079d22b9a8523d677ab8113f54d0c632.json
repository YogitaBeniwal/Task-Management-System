{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Task Management\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Footer, Header } from './components/Header';\nimport TaskForm from './components/TaskForm';\nimport TaskList from './components/TaskList';\nimport Auth from './components/Auth';\nimport { saveTask, getTasks, getUserProfile } from './api/taskApi';\nimport UserDashboard from './components/UserDashboard';\nimport Profile from './components/Profile';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const token = localStorage.getItem('token');\n  const [isLoggedIn, setIsLoggedIn] = useState(!!token); // Set initial state based on token\n  const [tasks, setTasks] = useState([]);\n  const [activeView, setActiveView] = useState('dashboard');\n  const [isMenuOpen, setIsMenuOpen] = useState(false); // State for menu toggle\n  const [username, setUsername] = useState(''); // Store username\n  const [profileData, setProfileData] = useState(null); // State for profile data\n\n  const handleNavigation = view => {\n    setActiveView(view);\n    setIsMenuOpen(false); // Close menu after navigation\n  };\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const fetchedTasks = await getTasks();\n        setTasks(fetchedTasks);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n          handleLogout(); // Logout if 401 (Unauthorized) or 403 (Forbidden)\n        }\n      }\n    };\n    const fetchProfileData = async () => {\n      try {\n        const profile = await getUserProfile(); // Fetch profile data from API\n        setProfileData(profile);\n      } catch (error) {\n        console.error('Error fetching profile data:', error);\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n          handleLogout(); // Logout if 401 (Unauthorized) or 403 (Forbidden)\n        }\n      }\n    };\n    if (isLoggedIn) {\n      //fetchTasks(); \n      //fetchProfileData();\n    }\n    if (isLoggedIn) {\n      setIsLoggedIn(true); // Set logged in status if token exists\n      // You might also want to fetch user data here using the token\n      fetchTasks();\n      fetchProfileData();\n    }\n  }, [isLoggedIn]);\n  const handleSuccessfulLogin = loggedInUsername => {\n    setIsLoggedIn(true);\n    setUsername(loggedInUsername);\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setTasks([]);\n    localStorage.removeItem('token'); // Add this line to remove the token\n  };\n  const handleTaskSave = async newTask => {\n    try {\n      await saveTask(newTask);\n      const updatedTasks = await getTasks();\n      setTasks(updatedTasks);\n    } catch (error) {\n      console.error('Error saving task:', error);\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n        handleLogout(); // Logout if 401 (Unauthorized) or 403 (Forbidden)\n      }\n    }\n  };\n  const handleTaskDelete = deletedTaskId => {\n    setTasks(tasks.filter(task => task._id !== deletedTaskId));\n  };\n  const handleTaskUpdate = updatedTask => {\n    setTasks(tasks.map(task => task._id === updatedTask._id ? updatedTask : task));\n  };\n  const toggleMenu = () => {\n    setIsMenuOpen(!isMenuOpen);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      isLoggedIn: isLoggedIn,\n      onLogout: handleLogout,\n      tasks: tasks,\n      toggleMenu: toggleMenu,\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), \" \", isLoggedIn && /*#__PURE__*/_jsxDEV(\"nav\", {\n      className: `sidebar-nav ${isMenuOpen ? 'open' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleNavigation('dashboard'),\n          className: activeView === 'dashboard' ? 'active' : '',\n          children: \"Dashboard\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleNavigation('tasks'),\n          className: activeView === 'tasks' ? 'active' : '',\n          children: \"Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => handleNavigation('profile'),\n          className: activeView === 'profile' ? 'active' : '',\n          children: \"Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"app-main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: isLoggedIn ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [activeView === 'dashboard' && /*#__PURE__*/_jsxDEV(UserDashboard, {\n            tasks: tasks\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 46\n          }, this), activeView === 'tasks' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(TaskForm, {\n              onSave: handleTaskSave\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n              tasks: tasks,\n              onTaskDelete: handleTaskDelete,\n              onTaskUpdate: handleTaskUpdate\n              // Pass the function as a prop\n              ,\n              setIsLoggedIn: setIsLoggedIn\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true), activeView === 'profile' && /*#__PURE__*/_jsxDEV(Profile, {\n            profileData: profileData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this) // Pass profile data to Profile component\n          ]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(Auth, {\n          onSuccessfulLogin: handleSuccessfulLogin\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"PslXqBoZJhEhK85B2sPofurbANA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Footer","Header","TaskForm","TaskList","Auth","saveTask","getTasks","getUserProfile","UserDashboard","Profile","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","token","localStorage","getItem","isLoggedIn","setIsLoggedIn","tasks","setTasks","activeView","setActiveView","isMenuOpen","setIsMenuOpen","username","setUsername","profileData","setProfileData","handleNavigation","view","fetchTasks","fetchedTasks","error","console","response","status","handleLogout","fetchProfileData","profile","handleSuccessfulLogin","loggedInUsername","removeItem","handleTaskSave","newTask","updatedTasks","handleTaskDelete","deletedTaskId","filter","task","_id","handleTaskUpdate","updatedTask","map","toggleMenu","className","children","onLogout","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSave","onTaskDelete","onTaskUpdate","onSuccessfulLogin","_c","$RefreshReg$"],"sources":["D:/Projects/Task Management/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Footer, Header } from './components/Header'; \r\nimport TaskForm from './components/TaskForm'; \r\nimport TaskList from './components/TaskList'; \r\nimport Auth from './components/Auth'; \r\nimport { saveTask, getTasks, getUserProfile } from './api/taskApi'; \r\nimport UserDashboard from './components/UserDashboard'; \r\nimport Profile from './components/Profile'; \r\nimport './App.css'; \r\n\r\nconst App = () => {\r\n  const token = localStorage.getItem('token');\r\n  const [isLoggedIn, setIsLoggedIn] = useState(!!token); // Set initial state based on token\r\n  const [tasks, setTasks] = useState([]); \r\n  const [activeView, setActiveView] = useState('dashboard');\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false); // State for menu toggle\r\n  const [username, setUsername] = useState(''); // Store username\r\n  const [profileData, setProfileData] = useState(null); // State for profile data\r\n\r\n  const handleNavigation = (view) => {\r\n    setActiveView(view);\r\n    setIsMenuOpen(false); // Close menu after navigation\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchTasks = async () => {\r\n      try {\r\n        const fetchedTasks = await getTasks();\r\n        setTasks(fetchedTasks);\r\n      } catch (error) {\r\n        console.error('Error fetching tasks:', error);\r\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n          handleLogout(); // Logout if 401 (Unauthorized) or 403 (Forbidden)\r\n        }\r\n      }\r\n    };\r\n    const fetchProfileData = async () => {\r\n      try {\r\n        const profile = await getUserProfile(); // Fetch profile data from API\r\n        setProfileData(profile);\r\n      } catch (error) {\r\n        console.error('Error fetching profile data:', error);\r\n        if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n          handleLogout(); // Logout if 401 (Unauthorized) or 403 (Forbidden)\r\n        }\r\n      }\r\n    };\r\n    if (isLoggedIn) {\r\n      //fetchTasks(); \r\n      //fetchProfileData();\r\n    }\r\n    if (isLoggedIn) {\r\n      setIsLoggedIn(true); // Set logged in status if token exists\r\n      // You might also want to fetch user data here using the token\r\n      fetchTasks(); \r\n      fetchProfileData();\r\n      \r\n    }\r\n  }, [isLoggedIn]); \r\n\r\n  const handleSuccessfulLogin = (loggedInUsername) => {\r\n    setIsLoggedIn(true);\r\n    setUsername(loggedInUsername); \r\n  };\r\n\r\n  const handleLogout = () => {\r\n    setIsLoggedIn(false);\r\n    setTasks([]); \r\n    localStorage.removeItem('token'); // Add this line to remove the token\r\n  };\r\n\r\n  const handleTaskSave = async (newTask) => {\r\n    try {\r\n      await saveTask(newTask); \r\n      const updatedTasks = await getTasks();\r\n      setTasks(updatedTasks); \r\n    } catch (error) {\r\n      console.error('Error saving task:', error);\r\n      if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n        handleLogout(); // Logout if 401 (Unauthorized) or 403 (Forbidden)\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTaskDelete = (deletedTaskId) => {\r\n    setTasks(tasks.filter(task => task._id !== deletedTaskId));\r\n  };\r\n\r\n  const handleTaskUpdate = (updatedTask) => {\r\n    setTasks(tasks.map(task => task._id === updatedTask._id ? updatedTask : task));\r\n  };\r\n\r\n  const toggleMenu = () => {\r\n    setIsMenuOpen(!isMenuOpen);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <Header isLoggedIn={isLoggedIn} onLogout={handleLogout} tasks={tasks} toggleMenu={toggleMenu} username={username}/> {/* Pass toggleMenu */}\r\n\r\n      {/* Conditionally render sidebar */}\r\n      {isLoggedIn && (\r\n        <nav className={`sidebar-nav ${isMenuOpen ? 'open' : ''}`}> \r\n          <ul>\r\n            <li onClick={() => handleNavigation('dashboard')} className={activeView === 'dashboard' ? 'active' : ''}>\r\n              Dashboard\r\n            </li>\r\n            <li onClick={() => handleNavigation('tasks')} className={activeView === 'tasks' ? 'active' : ''}>\r\n              Tasks\r\n            </li>\r\n            <li onClick={() => handleNavigation('profile')} className={activeView === 'profile' ? 'active' : ''}>\r\n              Profile\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      )}\r\n\r\n      <main className=\"app-main\">\r\n        <div className=\"content-container\"> \r\n          {isLoggedIn ? (\r\n            <>\r\n              {activeView === 'dashboard' && <UserDashboard tasks={tasks} />}\r\n              {activeView === 'tasks' && (\r\n                <>\r\n                  <TaskForm onSave={handleTaskSave} />\r\n                  <TaskList\r\n                    tasks={tasks}\r\n                    onTaskDelete={handleTaskDelete}\r\n                    onTaskUpdate={handleTaskUpdate}\r\n                    // Pass the function as a prop\r\n                    setIsLoggedIn={setIsLoggedIn}\r\n                  />\r\n                </>\r\n              )}\r\n              {activeView === 'profile' && (\r\n              <Profile profileData={profileData} /> // Pass profile data to Profile component\r\n            )}\r\n              {/* ... other views */}\r\n            </>\r\n          ) : (\r\n            \r\n            <Auth onSuccessfulLogin={handleSuccessfulLogin} />\r\n          )}\r\n          \r\n        </div>\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}